{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPLR1Cx/TFuxqBaVpiH5UfE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/alexander-toschev/alexander-toschev/blob/master/mbzuai\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ic8eTcKoEyA2"
      },
      "outputs": [],
      "source": [
        "# Google Colab Notebook: Introduction to Data Pre-Processing in Computer Vision\n",
        "\n",
        "## **1. Introduction**\n",
        "### **Definition and Importance of Data Pre-Processing in Computer Vision**\n",
        "Data pre-processing is a crucial step in computer vision workflows. It involves preparing raw image data to improve the performance of machine learning models. Proper pre-processing enhances:\n",
        "- Feature extraction quality\n",
        "- Model accuracy\n",
        "- Robustness to variations in data\n",
        "\n",
        "### **Key Steps in Data Pre-Processing**\n",
        "1. **Handling Missing Data** - Removing or imputing missing images in datasets.\n",
        "2. **Normalization** - Adjusting pixel values to a consistent range.\n",
        "3. **Scaling** - Resizing images to fit model requirements.\n",
        "4. **Augmentation** - Generating new images by transformations.\n",
        "5. **Transformation** - Applying changes such as histogram equalization.\n",
        "\n",
        "### **Why Data Quality Matters?**\n",
        "- Poor-quality data affects **image classification, object detection, and segmentation models**.\n",
        "- Noise, blurriness, or inconsistent scaling leads to incorrect feature extraction.\n",
        "- Data inconsistencies can cause overfitting or poor generalization in deep learning models.\n",
        "\n",
        "## **2. Hands-on Pre-Processing Techniques**\n",
        "\n",
        "### **Install Required Libraries**\n",
        "```python\n",
        "!pip install opencv-python numpy matplotlib albumentations\n",
        "```\n",
        "\n",
        "### **Import Dependencies**\n",
        "```python\n",
        "import cv2\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import albumentations as A\n",
        "from google.colab import files\n",
        "from PIL import Image\n",
        "from io import BytesIO\n",
        "```\n",
        "\n",
        "### **Upload and Display an Image**\n",
        "```python\n",
        "def upload_and_display():\n",
        "    uploaded = files.upload()\n",
        "    for filename in uploaded.keys():\n",
        "        img = Image.open(BytesIO(uploaded[filename]))\n",
        "        img = np.array(img)\n",
        "        plt.imshow(img)\n",
        "        plt.axis('off')\n",
        "        plt.title('Original Image')\n",
        "        plt.show()\n",
        "        return img\n",
        "\n",
        "img = upload_and_display()\n",
        "```\n",
        "\n",
        "### **Normalization of Image Data**\n",
        "```python\n",
        "def normalize_image(img):\n",
        "    img = img.astype('float32') / 255.0\n",
        "    plt.imshow(img)\n",
        "    plt.axis('off')\n",
        "    plt.title('Normalized Image')\n",
        "    plt.show()\n",
        "    return img\n",
        "\n",
        "normalized_img = normalize_image(img)\n",
        "```\n",
        "\n",
        "### **Image Resizing (Scaling)**\n",
        "```python\n",
        "def resize_image(img, size=(224, 224)):\n",
        "    resized_img = cv2.resize(img, size, interpolation=cv2.INTER_AREA)\n",
        "    plt.imshow(resized_img)\n",
        "    plt.axis('off')\n",
        "    plt.title('Resized Image')\n",
        "    plt.show()\n",
        "    return resized_img\n",
        "\n",
        "resized_img = resize_image(img)\n",
        "def augment_image(img):\n",
        "    transform = A.Compose([\n",
        "        A.HorizontalFlip(p=0.5),\n",
        "        A.RandomBrightnessContrast(p=0.2),\n",
        "        A.Rotate(limit=30, p=0.5)\n",
        "    ])\n",
        "    augmented = transform(image=img)['image']\n",
        "    plt.imshow(augmented)\n",
        "    plt.axis('off')\n",
        "    plt.title('Augmented Image')\n",
        "    plt.show()\n",
        "    return augmented\n",
        "\n",
        "augmented_img = augment_image(img)"
      ]
    }
  ]
}